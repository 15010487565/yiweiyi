package www.xcd.com.mylibrary.help;import android.app.Activity;import android.text.TextUtils;import android.util.Log;import com.google.gson.Gson;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.io.IOException;import java.net.URLEncoder;import java.util.Map;import java.util.concurrent.TimeUnit;import okhttp3.Call;import okhttp3.Callback;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.Response;import www.xcd.com.mylibrary.http.HttpInterface;/** * @auther Leo--薛传东 * Create at 2015/5/11 16:56 * okHttp网络请求协助类 */public class OkHttpHelper {    //log显示的每段长度    static int logNum = 3500;    private static OkHttpClient okHttpClient = new OkHttpClient.Builder()            .connectTimeout(50000, TimeUnit.MILLISECONDS)            .readTimeout(50000, TimeUnit.MILLISECONDS)            .writeTimeout(50000, TimeUnit.MILLISECONDS)            .retryOnConnectionFailure(true).build();    public static void postAsyncHttp(final Activity context,                                     final int requestCode,                                     final Map<String, String> paramsMaps,                                     final String path,                                     final HttpInterface httpListener) {        String toJson = new Gson().toJson(paramsMaps);        Log.e("TAG_httpUtils", "toJson=" + toJson + "=====path=" + path);//        MediaType mediaType = MediaType.parse("text/plain");        MultipartBody.Builder builder = new MultipartBody.Builder().setType(MultipartBody.FORM);        if (paramsMaps != null){            for (String key : paramsMaps.keySet()) {                try {                    if (!TextUtils.isEmpty(key)){                        builder.addFormDataPart(key, paramsMaps.get(key));                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }        RequestBody body = builder.build();        Request request = new Request.Builder()                .url(path)                .method("POST", body)                .build();        requestData(context, requestCode, paramsMaps, httpListener, request);    }    public static void getAsyncHttp(final Activity context,                                    final int requestCode,                                    final Map<String, String> paramsMaps,                                    final String path,                                    final HttpInterface httpListener) {        //处理参数        StringBuilder tempParams;        String requestUrl = "";        if (paramsMaps == null) {            //补全请求地址            requestUrl = path;        } else {            tempParams = new StringBuilder();            for (String key : paramsMaps.keySet()) {                try {                    if (!TextUtils.isEmpty(key)){                        String encode = URLEncoder.encode(((String) paramsMaps.get(key)));                        tempParams.append(String.format("%s=%s", key,encode, "utf-8"));                        tempParams.append("&");                    }                } catch (Exception e) {                    e.printStackTrace();                }            }            requestUrl = path + "?"+tempParams.toString();        }        String toJson = new Gson().toJson(paramsMaps);        Log.e("TAG_httpUtils", "toJson=" + toJson + "=====requestUrl=" + path);        Request request = new Request.Builder()                .url(requestUrl)                .method("GET", null)                .build();        requestData(context, requestCode, null, httpListener, request);    }    public static void getRestfulHttp(final Activity context,                                      final int requestCode,                                      final String path,                                      final HttpInterface httpListener) {        Log.e("TAG_成功", "path=" + path);        Request request = new Request.Builder()                .url(path)                .method("GET", null)                .build();        requestData(context, requestCode, null, httpListener, request);    }    public static void postAsyncImage(final Activity context,                                      final int requestCode,                                      final String filePath,                                      final String path,                                      final HttpInterface httpListener) {        RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)                .addFormDataPart("file", filePath,                        RequestBody.create(MediaType.parse("application/octet-stream"),                                new File(filePath)))                .build();        Request request = new Request.Builder()                .url(path)                .method("POST", body)                .build();        requestData(context, requestCode, null, httpListener, request);    }    private static void requestData(final Activity context, final int requestCode,                                    final Map<String, String> paramsMaps, final HttpInterface httpListener, Request request) {        Call call = okHttpClient.newCall(request);        call.enqueue(new Callback() {            @Override            public void onFailure(Call call, final IOException e) {                Log.e("TAG_httpUtils", "onFailure=" + e.toString());                if (httpListener != null) {                    httpListener.onErrorResult(requestCode, e.toString());                }            }            @Override            public void onResponse(Call call, final Response succeed) throws IOException {                final String response = succeed.body().string();                if (response.length() > logNum) {                    for (int i = 0; i < response.length(); i += logNum) {                        if (i + logNum < response.length())                            Log.e("TAG_成功", "第" + (i / logNum) + "段log===" + response.substring(i, i + logNum));                        else {                            Log.e("TAG_成功", "第" + (i / logNum) + "段log===" + response.substring(i, response.length()));                        }                    }                } else {                    Log.e("TAG_成功", "result=" + response);                }                context.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        try {                            JSONObject jsonObject = new JSONObject(response);                            int code = jsonObject.optInt("code", -1);                            String msg = jsonObject.optString("msg");                            if (httpListener !=null){                                if (code == 1||code == 2 || code ==3) {                                    httpListener.onSuccessResult(requestCode, code, msg, response, paramsMaps);                                } else {                                    httpListener.onErrorResult(requestCode, msg);                                }                            }                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                });            }        });    }}